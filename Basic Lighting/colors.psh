cbuffer Colors
{
    float3 object_color;
    float3 light_color;
    float3 light_position;
};

cbuffer Camera {
    float3 view_position;
};

struct PSInput
{
    float4 Pos   : SV_POSITION;
    float3 FragPos : POSITION0;
    float3 Normal  : NORMAL0;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{
    float ambient_strength = 0.1;
    float3 ambient = ambient_strength * light_color;

    float3 norm = normalize(PSIn.Normal);
    float3 light_dir = normalize(light_position - PSIn.FragPos);

    float diff = max(dot(norm, light_dir), 0.0);
    float3 diffuse = diff * light_color;


    float specular_strength = 0.5;
    float3 view_dir = normalize(view_position - PSIn.FragPos);
    float3 reflect_dir = reflect(-light_dir, norm);

    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 32);
    float3 specular = specular_strength * spec * light_color;

    float3 result = (ambient + diffuse + specular) * object_color;
    PSOut.Color = float4(result, 1.0);
}