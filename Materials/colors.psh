
struct Light {
    float3 position;

    float3 ambient;
    float3 diffuse;
    float3 specular;
};


struct Material {
    float3 ambient;
    float3 diffuse;
    float3 specular;
    float1 shininess;
};

cbuffer Lights {
    Light light;
};

cbuffer Materials {
    Material material;
};

cbuffer Camera {
    float3 view_position;
};


struct PSInput
{
    float4 Pos     : SV_POSITION;
    float3 FragPos : POSITION0;
    float3 Normal  : NORMAL0;
};

struct PSOutput
{
    float4 Color : SV_TARGET;
};

void main(in  PSInput  PSIn,
    out PSOutput PSOut)
{
    // ambient
    float3 ambient = light.ambient * material.ambient;

    // diffuse 
    float3 norm = normalize(PSIn.Normal);
    float3 lightDir = normalize(light.position - PSIn.FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    float3 diffuse = light.diffuse * (diff * material.diffuse);

    // specular
    float3 viewDir = normalize(view_position - PSIn.FragPos);
    float3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    float3 specular = light.specular * (spec * material.specular);

    float3 result = ambient + diffuse + specular;
    PSOut.Color = float4(result, 1.0);
}